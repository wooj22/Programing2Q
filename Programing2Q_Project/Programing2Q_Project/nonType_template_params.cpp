//// 형식이 아닌 템플릿 매개변수 (값	 매개변수)
//// Non-type Templates Parameters
//// 템플릿 매개변수에는 자료형이 아닌, 변수의 선언이 올 수 있다.
//// 해당 변수에 디폴트 지정도 가능.
//// 템플릿 매개변수는 함수나 클래스의 인스턴스화 시점에 결정된다.
//
//#include <iostream>
//
//template <typename T = int, int num = 0>	// <디폴트자료형, 논타입파라미터>
//T add_num(T t) {
//	return t + num;
//}
//
//int main() {
//	int x = 3;
//	std::cout << add_num<int, 5>(x) << std::endl;
//	std::cout << add_num<>(x) << std::endl;      // 디폴트 값 사용
//	return 0;
//}
//
///*
//함수 템플릿에도
//
//	비타입 인수를 사용할 수 있으나
//	형식인수 목록에 상수가 올 수 없으므로, 비타입 인수는 본체에서만 사용할 수 있다.
//	비타입 인수는 함수 호출시에 인수로 전달되는 것이 아니어서
//	함수명 다음에 sub<5>(); 식으로 인수의 값을 명시적으로 지정한다.
//
//	함수 템플릿의 비타입 인수는 실용성이 떨어지며 일부 컴파일러는 지원하지 않는다.
//
//// 템플릿 값 매개변수 인자로 전달할 수 있는 타입 -------- //C++17 이전
//
//	정수 타입들(bool, char, int, long 등등) ( float 과 double 은 제외 )
//	포인터 타입
//	enum 타입
//	std::nullptr_t(널 포인터)
//
//
//// 템플릿의 비타입 인수에서의 클래스 사용 ----------- // C++20
//
//	기존의 C++에서는 비타입 인수에서 클래스를 사용할 수 없었는데,
//	C++20부터는 드디어 가능해졌다.
//
//	대신 해당 클래스는 operator== 를 구현해야 하고,
//	해당 연산자의 반환 타입은 bool으로 변환할 수 있어야 하고,
//	이 조건을 해당 클래스의 부모 클래스들과 부모 클래스들의 non-static 멤버들도 만족해야 하며,
//	mutable 또는 volatile 지정자가 붙은 non-static 멤버들이 없어야 합니다.
//	TMP를 할 때 유용.
//*/